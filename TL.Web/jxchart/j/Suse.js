$(function () { $(".example-list .data").h(getBrowserSize().h - 100); setTimeout(function () { $("#picker").farbtastic("#color"); $("#op_picker").farbtastic("#op_color") }, 2000); var K = null; var G = $("#data_grid"); var h = "chart"; var i = null; var D = {}; var b = function () { }; var a = null; var r = "月份_一月_二月_三月_四月_五月_六月_七月_八月_九月_十月_十一月_十二月&房屋水电费用_1010_1030_1040_1020_1100_1020_1120_1050_1080_1120_1210_1090&衣食费用_800_900_870_970_780_920_780_840_920_810_880_920&交通费用_200_200_200_200_200_200_200_200_200_200_200_200&我的报表"; var J = []; var E = ""; var L = ""; var q = false; var g = "#fff"; var j = ""; var l = true; var F = [[[0, "rgba(255,255,255,0.5)"], [1, "rgba(69,114,167,0.5)"]], [[0, "rgba(255,255,255,0.5)"], [1, "rgba(170,70,67,0.5)"]], [[0, "rgba(255,255,255,0.5)"], [1, "rgba(142, 250, 122, 0.75)"]]]; var s = ["一月", "二月", "三月", "四月", "五月", "六月", "七月", "八月", "九月", "十月", "十一月", "十二月"]; var y = []; var v = [{ name: "Tokyo", data: [7, 6.9, 9.5, 14.5, 18.2, 21.5, 25.2, 26.5, 23.3, 18.3, 13.9, 9.6] }, { name: "New York", data: [-0.2, 0.8, 5.7, 11.3, 17, 22, 24.8, 24.1, 20.1, 14.1, 8.6, 2.5] }, { name: "Berlin", data: [-0.9, 0.6, 3.5, 8.4, 13.5, 17, 18.6, 17.9, 14.3, 9, 3.9, 1] }, { name: "London", data: [3.9, 4.2, 5.7, 8.5, 11.9, 15.2, 17, 16.6, 14.2, 10.3, 6.6, 4.8]}]; var B = "月份"; var x = "极限报表-演示示例"; var p = ""; var n = ""; J = [["月份", "房屋水电费用", "衣食费用", "交通费用"], ["一月", 1010, 800, 200], ["二月", 1030, 900, 200], ["三月", 1040, 870, 200], ["四月", 1020, 970, 200], ["五月", 1100, 780, 200], ["六月", 1020, 920, 200], ["七月", 1120, 780, 200], ["八月", 1050, 840, 200], ["九月", 1080, 920, 200], ["十月", 1120, 810, 200], ["十一月", 1210, 880, 200], ["十二月", 1090, 920, 200]]; i = G.handsontable({ minSpareRows: 1, minSpareCols: 1, rowHeaders: false, colHeaders: false, columnSorting: true, data: J, contextMenu: true, removeRowPlugin: true }).data("handsontable"); $("#handsontableAddRows").click(function () { var t = $("#data_grid table tbody tr").length; G.handsontable("alter", "insert_row", t) }).next().click(function () { var t = $("#data_grid table tbody tr").length; G.handsontable("alter", "remove_row", t - 1) }).next().click(function () { var t = $("#data_grid table tbody tr:eq(0) td").length; G.handsontable("alter", "remove_col", t - 1) }).next().click(function () { var t = $("#data_grid table tbody tr:eq(0) td").length; G.handsontable("alter", "insert_col", t) }); $("#handsontableClear").click(function () { if (confirm("确定要清空吗(刷新当前页面可还原到示例数据)?")) { J = [["x轴", "系列"], ["数值", 10], ["数值", 20], ["数值", 30]]; i = G.handsontable({ minSpareRows: 1, minSpareCols: 1, rowHeaders: false, colHeaders: false, columnSorting: true, data: J, contextMenu: true, removeRowPlugin: true }).data("handsontable") } }); $(".htCore").addClass("table-striped").addClass("table-hover").addClass("table-bordered"); var k = null; if (parastr("v") != null && parastr("v") != "") { L = parastr("v"); $(".example-list").hide(); o(); k = setInterval(d, 1500) } else { k = setInterval(d, 1500) } function d() { if (L == "") { var aa = i.getData(); var t = ""; var V = ""; var Y = "", X = "", W = "", U = "", T = "", S = "", R = "", Q = "", O = "", Z = ""; if (aa != null) { for (var P = 0; P < aa.length; P++) { for (var N = 0; N < aa[P].length; N++) { if (aa[P][N] == null || aa[P][N].toString() == "") { if (P > 0 && N > 0) { aa[P][N] = "0" } else { aa[P][N] = " " } } else { if (P > 0 && N > 0 && isNaN(aa[P][N].toString())) { } } switch (N) { case 1: Y += aa[P][N].toString().replace(",", "") + "_"; break; case 2: X += aa[P][N].toString().replace(",", "") + "_"; break; case 3: W += aa[P][N].toString().replace(",", "") + "_"; break; case 4: U += aa[P][N].toString().replace(",", "") + "_"; break; case 5: T += aa[P][N].toString().replace(",", "") + "_"; break; case 6: S += aa[P][N].toString().replace(",", "") + "_"; break; case 7: R += aa[P][N].toString().replace(",", "") + "_"; break; case 8: Q += aa[P][N].toString().replace(",", "") + "_"; break; case 9: O += aa[P][N].toString().replace(",", "") + "_"; break; case 10: Z += aa[P][N].toString().replace(",", "") + "_"; break } } V += aa[P][0].toString() + "_" } V = V.substr(0, V.length - 1) } t += V + "&"; Y = Y == "" ? "" : Y.substr(0, Y.length - 1) + "&"; X = X == "" ? "" : X.substr(0, X.length - 1) + "&"; W = W == "" ? "" : W.substr(0, W.length - 1) + "&"; U = U == "" ? "" : U.substr(0, U.length - 1) + "&"; T = T == "" ? "" : T.substr(0, T.length - 1) + "&"; S = S == "" ? "" : S.substr(0, S.length - 1) + "&"; R = R == "" ? "" : R.substr(0, R.length - 1) + "&"; Q = Q == "" ? "" : Q.substr(0, Q.length - 1) + "&"; O = O == "" ? "" : O.substr(0, O.length - 1) + "&"; Z = Z == "" ? "" : Z.substr(0, Z.length - 1) + "&"; t = t + Y + X + W + U + T + S + R + Q + O + Z; t += $("#chart_title").val(); if (r != t) { r = t; m(); c(); w() } else { } } else { if ($("#setting_title").val() != "n") { if (D.title.text != $("#chart_title").val()) { D.title.text = $("#chart_title").val(); w() } } else { if (D.title.text != "") { D.title.text = ""; w() } } } } setInterval(function () { $(".highcharts-container:eq(0) > div").css({ left: "660px", top: "444px", width: "110px", height: "40px", overflow: "hidden", padding: "5px", "z-index": "10000" }).show(); $(".highcharts-container:eq(1) > div").css({ position: "fixed", left: "10px", top: "2px", width: "725px", height: "35px", overflow: "hidden", padding: "2px" }).show(); $(".highcharts-container:eq(0) > div > div").css({ border: "0px", height: "30px", padding: "5px", "box-shadow": "0px 0px 0px 0px white" }); $(".highcharts-container:eq(1) > div > div").css({ border: "0px", height: "30px", padding: "5px", "box-shadow": "0px 0px 0px 0px white", background: "none" }); $(".highcharts-container:eq(0) > div > div > div").css({ "background-color": "#57B915", "border-radius": "2px", color: "white", padding: "5px 10px", "float": "left", "border-radius": "3px" }); $(".highcharts-container:eq(1) > div > div > div").css({ padding: "7px 20px", "float": "left", "border-radius": "3px", background: "#C5C5C5", "margin-left": "5px" }); $(".highcharts-container > div > div > hr").remove() }, 10); function m() { var P = r; if (P != "") { var t = P.split("&"); s = []; y = []; var T = t[0].split("_"); B = T[0]; for (var Q = 1; Q < T.length; Q++) { s.push(T[Q]) } v = []; for (var Q = 1; Q < t.length - 1; Q++) { if ($("#type").val() == "pie" && Q > 1) { continue } else { y.push(t[Q].split("_")[0].toString()); var O = t[Q].split("_"); var R = []; for (var N = 1; N < O.length; N++) { R.push({ y: parseFloat(O[N]), sliced: false, name: s[N - 1], color: getRandomColor(N) }) } var S = null; if ($("#type").val() == "bubble") { S = { name: y[Q - 1], data: R, marker: { fillColor: { radialGradient: {}, stops: F[Q % 3]}}} } else { S = { name: y[Q - 1], data: R} } v.push(S) } if ($("#setting_title").val() == "" ? true : false) { x = t[t.length - 1].toString() } else { x = "" } } } } function c() { b = function () { return false }; g = ($("#v_c").val().length > 0 ? $("#v_c").val() : false) || Highcharts.theme && Highcharts.theme.chart.backgroundColor || ""; var O = $("#setting_title_color").val().length > 0 ? unescape($("#setting_title_color").val()) : Highcharts.theme && Highcharts.theme.title.style.color || "Gray"; var S = parseInt($("#setting_title_fontSize").val().length > 0 ? $("#setting_title_fontSize").val() : 13); var P = $("#setting_title_family").val().length > 0 ? unescape($("#setting_title_family").val()) : "SimSun"; P = P.replace("%20", " "); setting_title_font = $("#setting_title_color").val().length > 0 ? S + "px " + P : Highcharts.theme && Highcharts.theme.title.style.font || "13 SimHei"; var R = $("#setting_x_color").val().length > 0 ? unescape($("#setting_x_color").val()) : Highcharts.theme && Highcharts.theme.xAxis.labels.style.color || "Gray"; var Q = parseInt($("#setting_x_fontSize").val().length > 0 ? $("#setting_x_fontSize").val() : 13); var U = $("#setting_x_family").val().length > 0 ? unescape($("#setting_x_family").val()) : "SimSun"; U = U.replace("%20", " "); setting_x_font = $("#setting_x_color").val().length > 0 ? Q + "px " + U : Highcharts.theme && Highcharts.theme.xAxis.labels.style.font || "13 SimHei"; var N = $("#setting_y_color").val().length > 0 ? unescape($("#setting_y_color").val()) : Highcharts.theme && Highcharts.theme.yAxis.labels.style.color || "Gray"; var t = parseInt($("#setting_y_fontSize").val().length > 0 ? $("#setting_y_fontSize").val() : 13); var T = $("#setting_y_family").val().length > 0 ? unescape($("#setting_y_family").val()) : "SimSun"; T = T.replace("%20", " "); setting_y_font = $("#setting_y_color").val().length > 0 ? t + "px " + T : Highcharts.theme && Highcharts.theme.yAxis.labels.style.font || "13 SimHei"; D = { chart: { renderTo: h, plotBorderWidth1: 1, backgroundColor: g, type: $("#type").val(), shadow: true, options3d: { enabled: true, alpha: 0, beta: 0} }, plotBackgroundImage1: "i/default/chart-type-pie.png", title: { text: x, x: -20, style: { color: O, font: setting_title_font} }, subtitle: { text: " ", x: -20 }, xAxis: { gridLineWidth: 0, tickWidth: $("#setting_x").val() == "n" ? 0 : 1, lineColor: $("#setting_x").val() == "n" ? "#fff" : "gray", labels: { enabled: $("#setting_x").val() == "n" ? false : true, style: { color: R, font: setting_x_font} }, categories: s, title: { text: p} }, yAxis: { tickWidth: $("#setting_y").val() == "n" ? 0 : 1, lineColor: $("#setting_y").val() == "n" ? "#fff" : "gray", labels: { enabled: $("#setting_y").val() == "n" ? false : true, style: { color: N, font: setting_y_font} }, title: { text: n }, gridLineWidth: $("#setting_y_gridLineWidth").val(), plotLines: [{ value: 0, width: 1, color: "#808080"}] }, tooltip: { valueSuffix: "", formatter: function () { if ((this.y + "").indexOf(".") != -1) { return this.y.toFixed(2) } return this.y } }, legend: { enabled: $("#setting_legend").val() == "n" ? false : true, layout: "vertical", align: "right", verticalAlign: "middle", borderWidth: 0 }, plotOptions: { column: { dataLabels: { enabled: true, color: Highcharts.theme && Highcharts.theme.dataLabelsColor || "gray", style: { textShadow1: "0 0 3px #4E4E4E, 0 0 3px #fcfcfc", fontSize: "13px" }, formatter: function () { if ($("#setting_pointValue").val() == "n") { return "" } else { if ((this.y + "").indexOf(".") != -1) { return this.y.toFixed(2) } return this.y } } } }, line: { dataLabels: { enabled: true, color: Highcharts.theme && Highcharts.theme.dataLabelsColor || "gray", style: { textShadow1: "0 0 3px #4E4E4E, 0 0 3px #fcfcfc", fontSize: "13px" }, formatter: function () { if ($("#setting_pointValue").val() == "n") { return "" } else { if ((this.y + "").indexOf(".") != -1) { return this.y.toFixed(2) } return this.y } } } }, pie: { innerSize: 100, depth: 45, cursor: "pointer", allowPointSelect: true, showInLegend: true, dataLabels: { enabled: true, color: Highcharts.theme && Highcharts.theme.dataLabelsColor || "gray", formatter: function () { var V = this.percentage + ""; var W = V.indexOf("."); if (W != -1) { V = V.substr(0, W + 2) } return "<b>" + this.point.name + "</b>: " + V + " %" } } }, area: { dataLabels: { enabled: true, color: Highcharts.theme && Highcharts.theme.dataLabelsColor || "gray", style: { textShadow1: "0 0 3px #4E4E4E, 0 0 3px #fcfcfc", fontSize: "13px" }, formatter: function () { if ($("#setting_pointValue").val() == "n") { return "" } else { if ((this.y + "").indexOf(".") != -1) { return this.y.toFixed(2) } return this.y } } } }, series: { lineWidth: $("#type").val() == "bubble" ? 0 : 3, point: { events: {}}} }, series: v} } var f = false; function w() { D.chart.renderTo = h; q = false; if (!f) { f = true; if (l) { D.chart.options3d.enabled = true } else { D.chart.options3d.enabled = false } K = new Highcharts.Chart(D, b); K.redraw(false); setTimeout(function () { if (h == "chart") { $(".highcharts-container:eq(0) > svg > g:eq(0)").click().remove(); $(".highcharts-container:eq(0) > div").css({ left: "48px", top: "440px", width: "745px", height: "40px", overflow: "hidden" }).show() } else { $(".highcharts-container:eq(1) > svg > g:eq(0)").click().remove(); $(".highcharts-container:eq(1) > div").css({ position: "fixed", left: "10px", top: "2px", width: "745px", height: "35px", overflow: "hidden" }).show() } $(".highcharts-container").css("overflow", "visible"); q = true; f = false }, 1500) } } $(".chart_type a").click(function () { if ($(this).attr("t") == "other") { $(".example-list").stop().t(-550).show().a({ top: 0 }, 300) } else { L = ""; E = $(this).attr("t"); $("#type").val(E); $.cookie("type", E); D.chart.type = E; m(); c(); C(); w() } }); function C() { switch (E) { case "pie": D.chart.options3d = { enabled: true, alpha: 45, beta: 0 }; break; case "column": D.chart.options3d = { enabled: true, alpha: 10, beta: 15, viewDistance: 25, depth: 70 }; break; default: D.chart.options3d = { enabled: false, alpha: 0, beta: 0 }; break } } $(".scaleb").click(function () { if ($(this).hasAttr("t")) { L = ""; E = $(this).attr("t"); $("#type").val(E); $.cookie("type", E); D.chart.type = E; m(); c(); C() } else { L = $(this).attr("v") } o(); $(".example-list").fadeOut(500) }); $(".example-list .close").click(function () { $(".example-list").fadeOut(500) }); $("#p_soon").click(function () { }).mouseenter(function () { $(".tip_soon").show() }).mouseleave(function () { $(".tip_soon").hide() }); $(".p_tip .btn_tip_use").mouseenter(function () { $(".tip_detail").show() }).mouseleave(function () { $(".tip_detail").hide() }); $(".p_tip a.close").click(function () { $(".tip_detail").hide() }); $(".show_example").hover(function () { $(".show_example_div").stop().css("top", "-380px").show().animate({ top: 0 }, 300) }, function () { $(".show_example_div").hide() }); $(".setting_font a").click(function () { if ($(this).hasClass("setting_1")) { var O = $(this).parent().parent(); var N = O.attr("item"); var t = O.hasClass("n") ? true : false; if (t) { $.cookie(N, ""); $("#" + N).val(""); O.removeClass("n") } else { $.cookie(N, "n"); $("#" + N).val("n"); O.addClass("n") } switch (N) { case "setting_title": if (t) { D.title.text = $("#chart_title").val() } else { D.title.text = "" } break; case "setting_x": if (t) { D.xAxis.tickWidth = 1; D.xAxis.lineColor = "gray"; D.xAxis.labels.enabled = true } else { D.xAxis.tickWidth = 0; D.xAxis.lineColor = "#fff"; D.xAxis.labels.enabled = false } break; case "setting_y": if (t) { D.yAxis.tickWidth = 1; D.yAxis.lineColor = "gray"; D.yAxis.labels.enabled = true } else { D.yAxis.tickWidth = 0; D.yAxis.lineColor = "#fff"; D.yAxis.labels.enabled = false } break; case "setting_legend": if (t) { D.legend.enabled = true } else { D.legend.enabled = false } break } w() } else { j = $(".chart-tool > div").index($(this).parent().parent()) + 1; $(".op_setting_font").show() } }); $(".chart-tool > div").mouseenter(function () { }).mouseleave(function () { }); $(".op_setting_font .ok").click(function () { $(".op_setting_font").hide(); var N = $(".fontFamily a.c").attr("v"); var O = $(".fontSize a.c").attr("v"); var t = $(".op_setting_color").css("background-color"); switch (j) { case 1: $.cookie("setting_title_family", N); $.cookie("setting_title_fontSize", O); $.cookie("setting_title_color", t); $("#setting_title_family").val(N); $("#setting_title_fontSize").val(O); $("#setting_title_color").val(t); D.title.style.color = t; D.title.style.font = O + "px " + N; break; case 3: $.cookie("setting_x_family", N); $.cookie("setting_x_fontSize", O); $.cookie("setting_x_color", t); $("#setting_x_family").val(N); $("#setting_x_fontSize").val(O); $("#setting_x_color").val(t); D.xAxis.labels.style.color = t; D.xAxis.labels.style.font = O + "px " + N; break; case 2: $.cookie("setting_y_family", N); $.cookie("setting_y_fontSize", O); $.cookie("setting_y_color", t); $("#setting_y_family").val(N); $("#setting_y_fontSize").val(O); $("#setting_y_color").val(t); D.yAxis.labels.style.color = t; D.yAxis.labels.style.font = O + "px " + N; break } o() }); $(".op_setting_font .close").click(function () { $(".op_setting_font").hide() }); $("#op_color").mouseenter(function () { $("#op_picker").stop().fadeIn(800) }).mouseleave(function () { $("#op_picker").stop().hide() }); $(".op_setting_item > a").click(function () { if (!$(this).hasClass("c")) { $(this).addClass("c").siblings("a").removeClass("c") } }); $(".clearCookie").click(function () { $.cookie("setting_title_family", null); $.cookie("setting_title_fontSize", null); $.cookie("setting_title_color", null); $.cookie("setting_x_family", null); $.cookie("setting_x_fontSize", null); $.cookie("setting_x_color", null); $.cookie("setting_y_family", null); $.cookie("setting_y_fontSize", null); $.cookie("setting_y_color", null); $.cookie("v_c", null); $.cookie("type", null); $.cookie("setting_title", null); $.cookie("setting_legend", null); $.cookie("setting_x", null); $.cookie("setting_y", null); $("#setting_title_family").val(""); $("#setting_title_fontSize").val(""); $("#setting_title_color").val(""); $("#setting_x_family").val(""); $("#setting_x_fontSize").val(""); $("#setting_x_color").val(""); $("#setting_y_family").val(""); $("#setting_y_fontSize").val(""); $("#setting_y_color").val(""); $("#v_c").val(""); $("#type").val(""); $("#setting_title").val(""); $("#setting_legend").val(""); $("#setting_x").val(""); $("#setting_y").val(""); c(); w() }); $(".s2").mouseenter(function () { $(this).find(".select_3d").show() }).mouseleave(function () { $(this).find(".select_3d").hide() }); $("#input_change_3d_x").on("change", function () { D.chart.renderTo = h; K.options.chart.options3d.alpha = this.value; A(); K.redraw(false) }); $("#input_change_3d_y").on("change", function () { D.chart.renderTo = h; K.options.chart.options3d.beta = this.value; A(); K.redraw(false) }); function A() { } $(".s1").mouseenter(function () { $(this).find(".select_bg").show() }).mouseleave(function () { $(this).find(".select_bg").hide() }); $(".select_bg > div[id!=select_color]").click(function () { g = $(this).attr("c"); $("#v_c").val(g); $.cookie("v_c", g); D.chart.backgroundColor = g; o() }); $("#select_color").mouseenter(function () { $(".select_color_div").show() }).mouseleave(function () { $(".select_color_div").hide() }); $(".btn_submit_color").click(function () { g = $("#color").css("background-color"); $("#v_c").val(g); $.cookie("v_c", g); $("#select_color").css("background-color", g); $(".select_color_div").hide(); D.chart.backgroundColor = g; o() }); $(".chart-fullscreen").click(function () { $(".chart-fullscreen-div").show(); h = "chart_fullscreen"; D.chart.renderTo = h; w() }); $(".chart-fullscreen-div .close").click(function () { $(".chart-fullscreen-div").fadeOut(500); h = "chart" }); $(".chart-refresh").click(function () { w() }); $(".chart-3d").click(function () { if (l) { $(this).removeClass("k") } else { $(this).addClass("k") } l = !l; w() }); function o() { b = function () { return false }; clearInterval(a); switch (L) { case "stat_speed": M(); break; case "stat_multi_pie": u(); break; case "stat_clock": e(); break; default: w(); break } } function u() { var N = Highcharts.getOptions().colors, U = ["MSIE", "Firefox", "Chrome", "Safari", "Opera"], O = "Browser brands", S = [{ y: 55.11, color: N[0], drilldown: { name: "MSIE versions", categories: ["MSIE 6.0", "MSIE 7.0", "MSIE 8.0", "MSIE 9.0"], data: [10.85, 7.35, 33.06, 2.81], color: N[0]} }, { y: 21.63, color: N[1], drilldown: { name: "Firefox versions", categories: ["Firefox 2.0", "Firefox 3.0", "Firefox 3.5", "Firefox 3.6", "Firefox 4.0"], data: [0.2, 0.83, 1.58, 13.12, 5.43], color: N[1]} }, { y: 11.94, color: N[2], drilldown: { name: "Chrome versions", categories: ["Chrome 5.0", "Chrome 6.0", "Chrome 7.0", "Chrome 8.0", "Chrome 9.0", "Chrome 10.0", "Chrome 11.0", "Chrome 12.0"], data: [0.12, 0.19, 0.12, 0.36, 0.32, 9.91, 0.5, 0.22], color: N[2]} }, { y: 7.15, color: N[3], drilldown: { name: "Safari versions", categories: ["Safari 5.0", "Safari 4.0", "Safari Win 5.0", "Safari 4.1", "Safari/Maxthon", "Safari 3.1", "Safari 4.1"], data: [4.55, 1.42, 0.23, 0.21, 0.2, 0.19, 0.14], color: N[3]} }, { y: 2.14, color: N[4], drilldown: { name: "Opera versions", categories: ["Opera 9.x", "Opera 10.x", "Opera 11.x"], data: [0.12, 0.37, 1.65], color: N[4]}}]; var t = []; var R = []; for (var T = 0; T < S.length; T++) { t.push({ name: U[T], y: S[T].y, color: S[T].color }); for (var Q = 0; Q < S[T].drilldown.data.length; Q++) { var X = 0.2 - Q / S[T].drilldown.data.length / 5; R.push({ name: S[T].drilldown.categories[Q], y: S[T].drilldown.data[Q], color: getRandomColor(T) }) } } var P = $("#setting_title_color").val().length > 0 ? unescape($("#setting_title_color").val()) : Highcharts.theme && Highcharts.theme.title.style.color || "Gray"; var W = parseInt($("#setting_title_fontSize").val().length > 0 ? $("#setting_title_fontSize").val() : 13); var V = $("#setting_title_family").val().length > 0 ? unescape($("#setting_title_family").val()) : "SimSun"; V = V.replace("%20", " "); setting_title_font = $("#setting_title_color").val().length > 0 ? W + "px " + V : Highcharts.theme && Highcharts.theme.title.style.font || "13 SimHei"; D = { chart: { renderTo: h, backgroundColor: g, type: "pie", options3d: { enabled: false, alpha: 45, beta: 0} }, title: { text: $("#setting_title").val() == "n" ? "两层饼图" : "", style: { color: P, font: setting_title_font} }, yAxis: { title: { text: "Total percent market share"} }, plotOptions: { pie: { shadow: false, center: ["50%", "50%"], innerSize: 100, depth: 45} }, tooltip: { valueSuffix: "%" }, series: [{ name: "Browsers", data: t, size: "60%", dataLabels: { formatter: function () { return this.y > 5 ? this.point.name : null }, color: "white", distance: -30} }, { name: "Versions", data: R, size: "90%", innerSize: "70%", dataLabels: { formatter: function () { return this.y > 1 ? "<b>" + this.point.name + ":</b> " + this.y + "%" : null } }}]} } function e() { var O = z(); var P = $("#setting_title_color").val().length > 0 ? unescape($("#setting_title_color").val()) : Highcharts.theme && Highcharts.theme.title.style.color || "Gray"; var t = parseInt($("#setting_title_fontSize").val().length > 0 ? $("#setting_title_fontSize").val() : 13); var N = $("#setting_title_family").val().length > 0 ? unescape($("#setting_title_family").val()) : "SimSun"; N = N.replace("%20", " "); setting_title_font = $("#setting_title_color").val().length > 0 ? t + "px " + N : Highcharts.theme && Highcharts.theme.title.style.font || "13 SimHei"; D = { chart: { renderTo: h, type: "gauge", plotBackgroundColor: null, plotBackgroundImage: null, plotBorderWidth: 0, plotShadow: false, backgroundColor: g }, credits: { enabled: false }, title: { text: $("#setting_title").val() == "n" ? "时钟" : $("#chart_title").val(), style: { color: P, font: setting_title_font} }, pane: { background: [{}, { backgroundColor: Highcharts.svg ? { radialGradient: { cx: 0.5, cy: -0.4, r: 1.9 }, stops: [[0.5, "rgba(255, 255, 255, 0.2)"], [0.5, "rgba(200, 200, 200, 0.2)"]]} : null}] }, yAxis: { labels: { distance: -20 }, min: 0, max: 12, lineWidth: 0, showFirstLabel: false, minorTickInterval: "auto", minorTickWidth: 1, minorTickLength: 5, minorTickPosition: "inside", minorGridLineWidth: 0, minorTickColor: "#666", tickInterval: 1, tickWidth: 2, tickPosition: "inside", tickLength: 10, tickColor: "#666", title: { text: "Powered by<br/>Highcharts", style: { color: "#BBB", fontWeight: "normal", fontSize: "8px", lineHeight: "10px" }, y: 10} }, tooltip: { formatter: function () { return this.series.chart.tooltipText } }, series: [{ data: [{ id: "hour", y: O.hours, dial: { radius: "60%", baseWidth: 4, baseLength: "95%", rearLength: 0} }, { id: "minute", y: O.minutes, dial: { baseLength: "95%", rearLength: 0} }, { id: "second", y: O.seconds, dial: { radius: "100%", baseWidth: 1, rearLength: "20%"}}], animation: false, dataLabels: { enabled: false}}] }; b = function (Q) { a = setInterval(function () { var R = Q.get("hour"), V = Q.get("minute"), T = Q.get("second"), S = z(), U = S.seconds == 0 ? false : { easing: "easeOutElastic" }; Q.tooltipText = H(Math.floor(S.hours), 2) + ":" + H(Math.floor(S.minutes * 5), 2) + ":" + H(S.seconds * 5, 2); R.update(S.hours, true, U); V.update(S.minutes, true, U); T.update(S.seconds, true, U) }, 1000) }; w() } function z() { var t = new Date(); return { hours: t.getHours() + t.getMinutes() / 60, minutes: t.getMinutes() * 12 / 60 + t.getSeconds() * 12 / 3600, seconds: t.getSeconds() * 12 / 60} } function H(N, t) { return new Array((t || 2) + 1 - String(N).length).join(0) + N } function I() { L = ""; E = "pie"; $("#type").val(E); $.cookie("type", E); m(); c(); D.plotOptions.pie.startAngle = 90; D.plotOptions.pie.endAngle = -180; w() } function M() { var O = $("#setting_title_color").val().length > 0 ? unescape($("#setting_title_color").val()) : Highcharts.theme && Highcharts.theme.title.style.color || "Gray"; var t = parseInt($("#setting_title_fontSize").val().length > 0 ? $("#setting_title_fontSize").val() : 13); var N = $("#setting_title_family").val().length > 0 ? unescape($("#setting_title_family").val()) : "SimSun"; N = N.replace("%20", " "); setting_title_font = $("#setting_title_color").val().length > 0 ? t + "px " + N : Highcharts.theme && Highcharts.theme.title.style.font || "13 SimHei"; D = { chart: { renderTo: h, backgroundColor: g, type: "gauge", plotBackgroundColor: null, plotBackgroundImage: null, plotBorderWidth: 0, plotShadow: false }, title: { text: $("#setting_title").val() == "n" ? "速度计" : $("#chart_title").val(), style: { color: O, font: setting_title_font} }, pane: { startAngle: -150, endAngle: 150, background: [{ backgroundColor: { linearGradient: { x1: 0, y1: 0, x2: 0, y2: 1 }, stops: [[0, "#FFF"], [1, "#333"]] }, borderWidth: 0, outerRadius: "109%" }, { backgroundColor: { linearGradient: { x1: 0, y1: 0, x2: 0, y2: 1 }, stops: [[0, "#333"], [1, "#FFF"]] }, borderWidth: 1, outerRadius: "107%" }, {}, { backgroundColor: "#DDD", borderWidth: 0, outerRadius: "105%", innerRadius: "103%"}] }, yAxis: { min: 0, max: 200, minorTickInterval: "auto", minorTickWidth: 1, minorTickLength: 10, minorTickPosition: "inside", minorTickColor: "#666", tickPixelInterval: 30, tickWidth: 2, tickPosition: "inside", tickLength: 10, tickColor: "#666", labels: { step: 2, rotation: "auto" }, title: { text: "km/h" }, plotBands: [{ from: 0, to: 120, color: "#55BF3B" }, { from: 120, to: 160, color: "#DDDF0D" }, { from: 160, to: 200, color: "#DF5353"}] }, series: [{ name: "Speed", data: [80], tooltip: { valueSuffix: " km/h"}}] }; b = function (P) { if (!P.renderer.forExport) { setInterval(function () { var Q = P.series[0].points[0], R, S = Math.round((Math.random() - 0.5) * 20); R = Q.y + S; if (R < 0 || R > 200) { R = Q.y - S } Q.update(R) }, 3000) } }; w() } }); function getRandomColor(a) { if (a == 0) { return "#FFCA04" } else { if (a == 1) { return "#61C5F4" } else { if (a == 2) { return "#E547F1" } else { if (a == 3) { return "#B3FF00" } else { if (a == 4) { return "red" } else { return "#" + ("00000" + (Math.random() * 16777216 << 0).toString(16)).slice(-6) } } } } } };
